<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>par_robot</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isPuzzleElement = false;

global.key_left = false;
global.key_right = false;
global.key_up = false;
global.key_down = false;
global.key_upleft = false;
global.key_upright = false;
global.key_downleft = false;
global.key_downright = false;
global.key_r = false;
global.key_esc = false;

global.playerMoved = false;

//normie memory
numKeys = 0;
//player position
//global.oldPlayerX = 0;
//global.oldPlayerY = 0;
oldPlayerX = 0;
oldPlayerY = 0;
playerX = 0;
playerY = 0;
isDeactivated = false;


//dynamic memory
moveHistory = ds_stack_create(); //stores players last position; appends when player moves
itemHistory = ds_stack_create(); //stores players items as of last position; appends when player moves

image_speed = 0;

move = false;
moved = false;
undo = false;
isDead = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_stack_destroy(moveHistory);
ds_stack_destroy(itemHistory);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_getInput();

global.playerMoved = false;

/**with (par_robot){
    scr_getInput();
    if (!isDead){
        if (move){
            if (global.playerMoved || object_get_name(object_index) == "obj_player"){
                handle_playerMove(self); //move is true if movement key is pressed
            }
        }
        if (moved) handle_gameMove(self);  //moved is true if player successfully moved
    }
    if (undo){
        print("undo");
        handle_undoMove(self); //undo is true if player wants to undo their latest move}
    }
}*/

//used for cutscene triggers
if (global.playerCanMove){
    with (par_robot){
        scr_getInput();
        if (!isDead){
            if (move){
                if (global.playerMoved || object_get_name(object_index) == "obj_player"){
                    handle_playerMove(self); //move is true if movement key is pressed
                }
            }
        }
        if (undo){
            //print("undo");
            //print("numKeys pre undo: " + string(obj_player.numKeys));
            print("pre undo: ");
            print(obj_spike.state);
            print(obj_spike.targetDirection);
            print(obj_spike.targetLocked);
            handle_undoMove(self); //undo is true if player wants to undo their latest move}
            print("right after undo: ");
            print(obj_spike.state);
            print(obj_spike.targetDirection);
            print(obj_spike.targetLocked);
            //print("numKeys after undo: " + string(obj_player.numKeys));
        }
    }
    with (par_robot){
        if (moved) {
            print(obj_spike.state);
            print(obj_spike.targetDirection);
            print(obj_spike.targetLocked);
            handle_gameMove(self);  //moved is true if player successfully moved
            print(obj_spike.state);
            print(obj_spike.targetDirection);
            print(obj_spike.targetLocked);
        }
    }
    
    //save state
    if (global.playerMoved){
        handle_gameSave();
    }
    
    //print(obj_player.numKeys);
    //print(ds_stack_size(obj_player.itemHistory));
    //print("player move: " + string(ds_stack_size(obj_player.moveHistory)));
    //print("key state: " + string(ds_stack_size(obj_key.stateHistory)));
    //print("key move: " + string(ds_stack_size(obj_key.moveHistory)));
    //print("door state: " + string(ds_stack_size(obj_door.stateHistory)));
    //print("triggerDoor move: " + string(ds_stack_size(obj_triggerDoor.moveHistory)));
    //print("Spike state: " + string(ds_stack_size(obj_spike.stateHistory)));
    //print("Spike move: " + string(ds_stack_size(obj_spike.moveHistory)));
    //print(obj_spike.state);
    //print(obj_spike.targetDirection);
    //print(obj_spike.targetLocked);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
