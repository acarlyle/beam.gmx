<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_layer</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); //no parent -- yet

isPuzzleElement = false;

m_roomName = "";
m_arrMap = undefined;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_getInput();

scr_clearStepGlobals();

//used for cutscene triggers
if (global.playerCanMove){
    with (par_robot){
        scr_getInput();
        if (!isDead){
            if (move){
                if (global.playerMoved || object_get_name(object_index) == "obj_player"){
                    handle_layerRobots(self); //move is true if movement key is pressed
                }
            }
        }
        if (undo){
            //print("undo");
            //print("numKeys pre undo: " + string(obj_player.numKeys));
            handle_undoMove(self); //undo is true if player wants to undo their latest move}
            //print("numKeys after undo: " + string(obj_player.numKeys));
        }
    }
    with (par_robot){
        if (moved) {
            print("player moved totes");
            //print("Robot at " + string(obj_player.x) + "," + string(obj_player.y));
            handle_pushOntoStack(self, false); //push previous turn's items onto stack before moving them
            handle_layerObjects(self);  //moved is true if player successfully moved
        }
    }
    //save state
    if global.playerMoved handle_gameSave(obj_player);
    //cleanup memory before switch rooms
    if global.switchRooms handle_freeMemory();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
