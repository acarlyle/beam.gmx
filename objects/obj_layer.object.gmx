<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_layer</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); //no parent -- yet

isPuzzleElement = false;

roomName = "";
roomMapArr = undefined; //2d array of each tile for move_object logic
objPosToNameMap = undefined; //maps x.y -&gt; "objName" for each puzzle element in the room
objNameAndPosToEnumMap = undefined; //maps "obj_name:x.y" -&gt; obj_enum for each puzzle element in the layer
mapKeyPriorityList = undefined; //priority queue of the keys from the objPosToNameMap sorted by parsing order
move = false; //if move is true, move the robot

list_robots = undefined; //ds list of robots in this layer
list_objEnums = undefined; //ordered ds_list of objEnums in a layer

updateLayer = false; //update when an objectEnum has moved
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_clearStepGlobals();

//print("Ya know, ya know !");

//if (get_objectFromString((objectStr(obj_player))).id == par_robot.id) print("tydadasasd");

//print(robot.oldPlayerX);

//used for cutscene triggers
if (global.playerCanMove &amp;&amp; self.list_robots){
    for (var r = 0; r &lt; ds_list_size(self.list_robots); r++) //foreach robot in this layer
    {
        var robot = self.list_robots[| r]; //robot enum
        get_input(self);
        
        if (!robot[| ROBOT.ISDEAD]){
            if (self.move){
                //print("ya");
                print(robot[| OBJECT.NAME]);
                if (global.playerMoved || robot[| OBJECT.NAME] == "obj_player"){
                    //print("ya^2");
                    handle_layerRobots(self, robot); //move is true if movement key is pressed
                }
            }
        }
        /*if (robot.undo){
            //print("undo");
            //print("numKeys pre undo: " + string(obj_player.numKeys));
            handle_undoMove(self); //undo is true if player wants to undo their latest move}
            //print("numKeys after undo: " + string(obj_player.numKeys));
        }*/
        //}
        if (robot){
            if (robot[| OBJECT.MOVED]) {
                print("player moved totes");
                handle_layerObjects(self, robot);  //moved is true if player successfully moved
            }
        }
        
        //TODO -&gt; Correctly update the Layer if an object has moved (current stuff is hardcoded)
        if (updateLayer) handle_updateLayer(self);
        
        //save state
        if global.playerMoved handle_gameSave(obj_player);
        //cleanup memory before switch rooms
        if global.switchRooms handle_freeMemory();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
